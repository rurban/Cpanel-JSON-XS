{"version":1,"ops":[{"type":3,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1448902530,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE2MDY4ODYwMw==","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/49#issuecomment-160688603"},"message":"That's how I spec'ed it for now, but didn't document it enough. \nconvert_blessed together with allow_blessed now not only accepts blessed refs, also unblessed refs.\nI originally wanted to use a new option allow_stringify for this behavior, but didn't introduce it yet.\n\nMaybe we should combine convert_blessed together with allow_unknown to stringify non-object refs.\n\n```\nconvert_blessed:\nIf C\u003c$enable\u003e is true (or missing), then C\u003cencode\u003e, upon encountering a\nblessed object, will check for the availability of the C\u003cTO_JSON\u003e method\non the object's class. If found, it will be called in scalar context\nand the resulting scalar will be encoded instead of the object. If no\nC\u003cTO_JSON\u003e method is found, a stringification overload method is tried next.\nIf both are not found, the value of C\u003callow_blessed\u003e will decide what\nto do.\n\n=item other references\n\nOther unblessed references are generally not allowed and will cause an\nexception to be thrown, except for references to the integers C\u003c0\u003e and\nC\u003c1\u003e, which get turned into C\u003cfalse\u003e and C\u003ctrue\u003e atoms in JSON.\nWith the option C\u003callow_unknown\u003e, you can ignore the exception \nand return C\u003cnull\u003e instead.\n```\n\nnew:\n\n```\nWith the option C\u003callow_unknown\u003e, you can ignore the exception and return\nC\u003cnull\u003e instead, or together with C\u003cconvert_blessed\u003e return the perl \nstringification of the reference.\n```","files":null},{"type":5,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1448902613,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDQ3Nzk0NTI1Mw=="},"added":["question"],"removed":[]},{"type":3,"author":{"id":"d19730b1d47a47ba43733401ca1bc3d2bbb7f976"},"timestamp":1448902850,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE2MDY4OTk3OQ==","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/49#issuecomment-160689979"},"message":"Hmm, that could be interesting but a couple of things:\n1. It's still not quite consistent currently because scalar references to empty string and undef still encode to null.\n2. for the record, Mojo::JSON/JSON::Tiny encodes all scalar refs to true or false booleans, the same as refs to 1/0.\n3. seems kind of weird for \"convert_blessed\" to affect nonblessed refs.\n4. allow_blessed also seems to be required for stringify atm (EDIT: I see you mentioned this is the case)","files":null},{"type":3,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1449064874,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE2MTMwMjcwMQ==","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/49#issuecomment-161302701"},"message":"Ok, we really need to another option allow_stringify for those and avoid abusing convert_blessed for that.\nI wanted to use the options provided by JSON::PP and used those results. Unfortunately JSON yields conflicting results based on its backend, so I changed the backend option to always enforce JSON::PP.\n\n```\n=item other references\n\nOther unblessed references are generally not allowed and will cause an\nexception to be thrown, except for references to the integers C\u003c0\u003e and\nC\u003c1\u003e, which get turned into C\u003cfalse\u003e and C\u003ctrue\u003e atoms in JSON. \n\nWith the option C\u003callow_stringify\u003e, you can ignore the exception and return\nthe stringification of the perl value.\n\nWith the option C\u003callow_unknown\u003e, you can ignore the exception and\nreturn C\u003cnull\u003e instead.\n\n   encode_json [\\\"x\"]        # =\u003e cannot encode reference to scalar 'SCALAR(0x..)'\n                             # unless the scalar is 0 or 1\n   encode_json [\\0, \\1]      # yields [false,true]\n\n   allow_stringify-\u003eencode_json [\\\"x\"] # yields \"x\", unlike JSON::PP\n   allow_stringify-\u003eencode_json [\\\"\"]   # yields null, same as JSON::PP\n   allow_stringify-\u003eencode_json [\\undef] # yields null, same as JSON::PP\n   allow_unknown-\u003eencode_json [\\\"x\"] # yields null\n```\n\nIn perl \\undef or \\\"\" is true, refs are always true.\nBut in the JSON context this would be counter-intuitive. \nSo I went with the values returned by JSON::PP, expect for stringrefs","files":null},{"type":3,"author":{"id":"d19730b1d47a47ba43733401ca1bc3d2bbb7f976"},"timestamp":1449069852,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE2MTMzMTE5Nw==","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/49#issuecomment-161331197"},"message":"A separate option works better, I agree.","files":null},{"type":3,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1449074029,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE2MTM1NzAwMA==","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/49#issuecomment-161357000"},"message":"The problem with an seperate option is that you cannot use it. Other encoders do not support it.\nI'll release it as is.","files":null},{"type":4,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1449074096,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50NDgwMzkwNzA5"},"status":2}]}