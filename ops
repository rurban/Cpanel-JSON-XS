{"version":1,"ops":[{"type":6,"author":{"id":"060201ef55c064fbe5ae4c7c1fc40280a7cfa1e3"},"timestamp":1529451838,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDk4OTg3OTE1"},"target":"bb714ef3d3f61e48d0d485b7beb09125d7dfb42dc2871a4f2f2b8f58c9b9680c","message":"The docs say:\n\n```\nIf the number consists of digits only, Cpanel::JSON::XS will try to\nrepresent it as an integer value. If that fails, it will try to\nrepresent it as a numeric (floating point) value if that is\npossible without loss of precision.\n```\n\nWhen it says \"it will try,\" does that mean it will only be treated as an int if the number fits within a perl int, even if allow_bignum() is enabled?\n\nBecause I have a case with a VM running 32-bit perl:\n```\n perl -V:ivsize \nivsize='4';\n```\n\nAnd this script converts the assignee_id to a float:\n\n```perl\n#!/usr/bin/env perl\n\nuse strict;\nuse warnings;\nuse Math::BigInt;\nuse Cpanel::JSON::XS ();\n\nmy $assignee_id = 5439409363;\n#my $assignee_id = Math::BigInt-\u003enew('5439409363');\n\nmy $json = Cpanel::JSON::XS-\u003enew-\u003eallow_blessed-\u003eallow_bignum-\u003econvert_blessed-\u003eencode({\n  assignee_id =\u003e $assignee_id + 0,\n});\nprint \"$json\\n\";\n```\n\n\nThat prints:\n```\n{\"assignee_id\":5439409363.0}\n```\n\nBut on 64-bit, it's treated as an int. Is the only way to get that treated as an int consistently to create it as a BigInt instance first?\n\nThanks.","files":null},{"type":6,"author":{"id":"060201ef55c064fbe5ae4c7c1fc40280a7cfa1e3"},"timestamp":1529451894,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDk4OTg4MTQ0"},"target":"bb714ef3d3f61e48d0d485b7beb09125d7dfb42dc2871a4f2f2b8f58c9b9680c","message":"The docs say:\n\n```\nIf the number consists of digits only, Cpanel::JSON::XS will try to\nrepresent it as an integer value. If that fails, it will try to\nrepresent it as a numeric (floating point) value if that is\npossible without loss of precision.\n```\n\nWhen it says \"it will try,\" does that mean it will only be treated as an int if the number fits within a perl int, even if allow_bignum() is enabled?\n\nBecause I have a case with a VM running 32-bit perl:\n```\n$ perl -V:ivsize \nivsize='4';\n```\n\nAnd this script converts the assignee_id to a float:\n\n```perl\n#!/usr/bin/env perl\n\nuse strict;\nuse warnings;\nuse Math::BigInt;\nuse Cpanel::JSON::XS ();\n\nmy $assignee_id = 5439409363;\n#my $assignee_id = Math::BigInt-\u003enew('5439409363');\n\nmy $json = Cpanel::JSON::XS-\u003enew-\u003eallow_blessed-\u003eallow_bignum-\u003econvert_blessed-\u003eencode({\n  assignee_id =\u003e $assignee_id + 0,\n});\nprint \"$json\\n\";\n```\n\n\nThat prints:\n```\n{\"assignee_id\":5439409363.0}\n```\n\nBut on 64-bit, it's treated as an int. Is the only way to get that treated as an int consistently to create it as a BigInt instance first?\n\nThanks.","files":null},{"type":6,"author":{"id":"060201ef55c064fbe5ae4c7c1fc40280a7cfa1e3"},"timestamp":1529466852,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDk5MDQ0NzE3"},"target":"bb714ef3d3f61e48d0d485b7beb09125d7dfb42dc2871a4f2f2b8f58c9b9680c","message":"The docs say:\n\n```\nIf the number consists of digits only, Cpanel::JSON::XS will try to\nrepresent it as an integer value. If that fails, it will try to\nrepresent it as a numeric (floating point) value if that is\npossible without loss of precision.\n```\n\nWhen it says \"it will try,\" does that mean it will only be treated as an int if the number fits within a perl int, even if allow_bignum() is enabled?\n\nBecause I have a case with a VM running 32-bit perl:\n```\n$ perl -V:ivsize \nivsize='4';\n```\n\nAnd this script converts the assignee_id to a float:\n\n```perl\n#!/usr/bin/env perl\n\nuse strict;\nuse warnings;\nuse Math::BigInt;\nuse Cpanel::JSON::XS ();\n\nmy $assignee_id = 5439409363;\n#my $assignee_id = Math::BigInt-\u003enew('5439409363');\n\nmy $json = Cpanel::JSON::XS-\u003enew-\u003eallow_blessed-\u003eallow_bignum-\u003econvert_blessed-\u003eencode({\n  assignee_id =\u003e $assignee_id + 0,\n});\nprint \"$json\\n\";\n```\n\n\nThat prints:\n```\n{\"assignee_id\":5439409363.0}\n```\n\nBut on 64-bit, it's treated as an int. Is the only way to get that treated as an int consistently, to create it as a BigInt instance first?\n\nThanks.","files":null},{"type":6,"author":{"id":"060201ef55c064fbe5ae4c7c1fc40280a7cfa1e3"},"timestamp":1529514211,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDk5MzI2NDk0"},"target":"bb714ef3d3f61e48d0d485b7beb09125d7dfb42dc2871a4f2f2b8f58c9b9680c","message":"The docs say:\n\n```\nIf the number consists of digits only, Cpanel::JSON::XS will try to\nrepresent it as an integer value. If that fails, it will try to\nrepresent it as a numeric (floating point) value if that is\npossible without loss of precision.\n```\n\nWhen it says \"it will try,\" does that mean it will only be treated as an int if the number fits within a perl int, even if allow_bignum() is enabled?\n\nBecause I have a case with a VM running 32-bit perl:\n```\n$ perl -V:ivsize \nivsize='4';\n```\n\nAnd this script converts the assignee_id to a float:\n\n```perl\n#!/usr/bin/env perl\n\nuse strict;\nuse warnings;\nuse Math::BigInt;\nuse Cpanel::JSON::XS ();\n\nmy $assignee_id = 5439409363;\n#my $assignee_id = Math::BigInt-\u003enew('5439409363');\n\nmy $json = Cpanel::JSON::XS-\u003enew-\u003eallow_blessed-\u003eallow_bignum-\u003econvert_blessed-\u003eencode({\n  assignee_id =\u003e $assignee_id,\n});\nprint \"$json\\n\";\n```\n\n\nThat prints:\n```\n{\"assignee_id\":5439409363.0}\n```\n\nBut on 64-bit, it's treated as an int. Is the only way to get that treated as an int consistently, to create it as a BigInt instance first?\n\nThanks.","files":null},{"type":3,"author":{"id":"060201ef55c064fbe5ae4c7c1fc40280a7cfa1e3"},"timestamp":1529452101,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5ODU4MDI4Nw==","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/112#issuecomment-398580287"},"message":"And just to note, JSON::XS keeps that as an int. I realize it has other issues.\n\nJSON::XS 3.01\nCpanel::JSON::XS 4.02\n\nperl 5.18.2","files":null},{"type":3,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1534956540,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM5ODY3MTAzMw==","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/112#issuecomment-398671033"},"message":"At least or current behavior matches the documentation.\nBut JSON::XS is right. Encoding should assume int64 not just int32. Javascript doesn't care anyways as they represent ints as floats, and only internally use 31bit ints I think.\nSo the docs need to be fixed to encode int64 to int without the decimal point separator, and the implementation.\n\n\u003e But on 64-bit, it's treated as an int. Is the only way to get that treated as an int consistently, to create it as a BigInt instance first?\n\nLooks like so, yes. This at least guarantees no precision loss, even if MAX_INT64. For the normal case we should really assume int64 targets, and only when decoding back to 32bit ints convert to double.","files":null},{"type":6,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1534956540,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDEyMjA1NjE2Ng=="},"target":"fe344a6926e41627a60fa55faaefca6b43eaa619ed66cd145a84fb74f4f9599c","message":"At least our current behavior matches the documentation.\nBut JSON::XS is right. Encoding should assume int64 not just int32. Javascript doesn't care anyways as they represent ints as floats, and only internally use 31bit ints I think.\nSo the docs need to be fixed to encode int64 to int without the decimal point separator, and the implementation.\n\n\u003e But on 64-bit, it's treated as an int. Is the only way to get that treated as an int consistently, to create it as a BigInt instance first?\n\nLooks like so, yes. This at least guarantees no precision loss, even if MAX_INT64. For the normal case we should really assume int64 targets, and only when decoding back to 32bit ints convert to double.","files":null},{"type":5,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1550225454,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDIxNDIwNTI5NDE="},"added":["bug"],"removed":[]},{"type":3,"author":{"id":"5e0a68f2609f1b2ed53fa7449ddf2c976324fce4"},"timestamp":1558095628,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQ5MzQzMzUwNA==","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/112#issuecomment-493433504"},"message":"@mla This is not problem in Cpanel::JSON::XS, but rather in your provided example.\n\nThis code\n```perl\nmy $assignee_id = 5439409363;\n```\non 32bit perl assigns into variable `assignee_id` floating point number and not integer!\n\nYou can verify it via following test:\n```\n$ perl -MDevel::Peek -e 'my $assignee_id = 5439409363; Dump $assignee_id'\n```\n\nOn 32bit perl with 32bit integers it prints:\n```\nSV = NV(0x574c385c) at 0x574bb810                                                                                                                                                                                  \n  REFCNT = 1                                                                                                                                                                                                       \n  FLAGS = (NOK,pNOK)                                                                                                                                                                                               \n  NV = 5439409363\n```\n(NV means floating point)\n\nOn 64bit perl with 64bit integers it prints:\n```\nSV = IV(0x560c223a9ca0) at 0x560c223a9cb0                                                                                                                                                                          \n  REFCNT = 1                                                                                                                                                                                                       \n  FLAGS = (IOK,pIOK)                                                                                                                                                                                               \n  IV = 5439409363\n```\n(IV means integer)\n\nTherefore Cpanel::JSON::XS takes floating point number from that variable and encodes it into json. So Cpanel::JSON::XS does the right thing.\n\n\u003e But on 64-bit, it's treated as an int.\n\nYes, this is how is Perl working. Your number cannot be represented by native processor integer then it is represented by native processor floating point number.\n\n\u003e Is the only way to get that treated as an int consistently, to create it as a BigInt instance first?\n\nNo. BigInt is exactly for this purpose.\n\n@rurban I think you can close this issue as it is not issue at all.","files":null},{"type":3,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1558097105,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQ5MzQ0MDAxMw==","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/112#issuecomment-493440013"},"message":"@pali I'm not so sure. integers in JSON should be independent on use64bitint or not. JSON is architecture independent. That's why we also promote to bigint. In the 32int case when perl promotes to float we might need to strip off the dot for proper roundtrips. or even promote to bigint when we loose precision.","files":null},{"type":3,"author":{"id":"5e0a68f2609f1b2ed53fa7449ddf2c976324fce4"},"timestamp":1558097345,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQ5MzQ0MTE4MQ==","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/112#issuecomment-493441181"},"message":"@rurban Problem is that conversion to float is done by perl itself prior passing value to Cpanel::JSON::XS. So it is something which cannot be changed or fixed in Cpanel::JSON::XS. It is how Perl works.\n\nSee another example:\n```\n$ perl -e 'my $var = 12345678901234567890; print $var;'\n1.23456789012346e+19\n```\nPrecision is lost by perl, even without loading Cpanel::JSON::XS.\n\nMain problem is that above Perl code `my $assignee_id = 5439409363;` needs 64bit perl. It is problem in that provided code.","files":null},{"type":3,"author":{"id":"5e0a68f2609f1b2ed53fa7449ddf2c976324fce4"},"timestamp":1558097704,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQ5MzQ0MTk0NQ==","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/112#issuecomment-493441945"},"message":"Let say it in other words: For 32bit perl is token `12345678901234567890` floating point number equivalent to `1.23456789012346e+19`. In same way token `5439409363` is also floating point.","files":null},{"type":6,"author":{"id":"5e0a68f2609f1b2ed53fa7449ddf2c976324fce4"},"timestamp":1558097704,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDIyMzc5MzU2MQ=="},"target":"4f20ea1b6bb6db99f31c842543ea1bf30acd3109ad53c708e6373b8c9ae0a91e","message":"Let say it in other words: For 32bit perl is token `12345678901234567890` floating point number equivalent to `1.23456789012346e+19`. In same way token `5439409363` is also floating point.\nAlso token `4.5` is floating point.\n\nAnd if user writes floating point token, json encoder needs to encode it as floating point number. Or not?\n\nBtw, for enforcing JSON types, e.g. having integer in json output, there is Cpanel::JSON::XS::Type. You can write `encode_json([$var], [JSON_TYPE_INT])` and you would always get json integer, not floating point.","files":null},{"type":3,"author":{"id":"060201ef55c064fbe5ae4c7c1fc40280a7cfa1e3"},"timestamp":1558201328,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQ5MzY5NDM1Nw==","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/112#issuecomment-493694357"},"message":"Thank you, @pali. That clarifies a lot for me.\n\nThe example I gave was contrived, of course. IIRC, the issue was found with an API integration. It had been working for a while with no issues and then we switched from JSON::XS to Cpanel::JSON::XS and we started seeing rejected messages due to IDs being converted to floats.\n\nI think we did resolve the issue by converting to BigInt, but I still wonder what exactly JSON::XS is doing that it didn't exhibit the same behavior.\n\nA quick scan of the JSON::XS code shows this:\n\n```\n else if (SvNOKp (sv))\n    {\n      // trust that perl will do the right thing w.r.t. JSON syntax.\n      need (enc, NV_DIG + 32);\n      Gconvert (SvNVX (sv), NV_DIG, 0, enc-\u003ecur);\n      enc-\u003ecur += strlen (enc-\u003ecur);\n    }\n```\n\nDoes that seem like the relevant bit? You guys understand that a lot better than I do.","files":null},{"type":3,"author":{"id":"5e0a68f2609f1b2ed53fa7449ddf2c976324fce4"},"timestamp":1559552235,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQ5ODE3MjMwNw==","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/112#issuecomment-498172307"},"message":"I do not know what is `JSON::XS` doing differently, but as stated in previous comments, I think that `Cpanel::JSON::XS` gives correct result for your provided example. We know that `JSON::XS` has (or had) bugs, so this may be another one.","files":null}]}