{"version":1,"ops":[{"type":3,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1432767233,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDEwNjEwMjcwMA==","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/37#issuecomment-106102700"},"message":"I agree. I've tried both variants back and forth, and there needs to be an option.","files":null},{"type":3,"author":{"id":"1eb3a44e27e5afa5482d52154d756417cb39d47a"},"timestamp":1435413553,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDExNjA1MzYxNw==","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/37#issuecomment-116053617"},"message":":+1: I would really like to use that option.","files":null},{"type":3,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1435575890,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDExNjYwOTI2NQ==","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/37#issuecomment-116609265"},"message":"The counter argument is explained here: https://www.youtube.com/watch?v=Gzx6KlqiIZE\u0026feature=youtu.be\n\nserializers who allow deserialization of objects, and JSON and Data::MessagePack are the only ones currently who do not, are unsafe.\nour security team has lot of troubles with those serializers.","files":null},{"type":3,"author":{"id":"d19730b1d47a47ba43733401ca1bc3d2bbb7f976"},"timestamp":1435586053,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDExNjY2ODMzMw==","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/37#issuecomment-116668333"},"message":"This feature does not allow for deserialization of objects, it is only an additional way to serialize them; when deserialized, they will still always be strings.","files":null},{"type":3,"author":{"id":"ea9561e6f683ff9a557b22e2b42bfaa46d7e988b"},"timestamp":1435763029,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDExNzcwOTYwNw==","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/37#issuecomment-117709607"},"message":"Seems like a nice to have :)","files":null},{"type":3,"author":{"id":"344f0903a08b16457ee9ac8482295d0d20213787"},"timestamp":1445052600,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE0ODg4MTgzMw==","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/37#issuecomment-148881833"},"message":":+1: Being able to fallback on stringification of an object for serialization would be more useful than just getting `null`.  Could do something like `convert_blessed([qw(TO_JSON to_string)])` or make another option like `stringify_blessed(1)` that just did `$obj . ''`.","files":null},{"type":3,"author":{"id":"43c094ffabff3148b0620872e416505b808cddc6"},"timestamp":1445521351,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE1MDIyNjkxMw==","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/37#issuecomment-150226913"},"message":":+1:","files":null},{"type":3,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1445529084,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE1MDI2ODg4MQ==","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/37#issuecomment-150268881"},"message":"Can somebody come up with a testcase please?\nThe true and false values would be \\1 and \\0, the Mojo::JSON docs are wrong there.\n\nThis test works ok:\n\n```\nuse Test::More;\nBEGIN {\n  eval \"require Mojo::JSON;\";\n  if ($@) {\n    plan skip_all =\u003e \"Mojo::JSON required for testing interop\";\n    exit 0;\n  } else {\n    plan tests =\u003e 6;\n  }\n}\n\nuse Mojo::JSON ();\nuse Cpanel::JSON::XS ();\n\nmy $booltrue = q({\"is_true\":true});\nmy $boolfalse = q({\"is_false\":false});\n#my $boolpl     = { is_false =\u003e \\0, is_true =\u003e \\1 };\nmy $js = Mojo::JSON::decode_json( $booltrue );\nis( $js-\u003e{is_true}, 1 );\n\nmy $cjson = Cpanel::JSON::XS-\u003enew;\nis($cjson-\u003eencode( $js ), $booltrue)\n  or diag \"\\$Mojolicious::VERSION=$Mojolicious::VERSION,\".\n  \" \\$Cpanel::JSON::XS::VERSION=$Cpanel::JSON::XS::VERSION\";\n\n$js = Mojo::JSON::decode_json( $boolfalse );\nis( $cjson-\u003eencode( $js ), $boolfalse );\nis( $js-\u003e{is_false}, 0 );\n\n$js = $cjson-\u003edecode( $booltrue );\nis( $cjson-\u003eencode( $js ), $booltrue ) or diag(ref $js-\u003e{is_true} );\n$js = $cjson-\u003edecode( $boolfalse );\nis( $cjson-\u003eencode( $js ), $boolfalse ) or diag(ref $js-\u003e{is_false} );\n```","files":null},{"type":3,"author":{"id":"d19730b1d47a47ba43733401ca1bc3d2bbb7f976"},"timestamp":1445529474,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE1MDI3MDYwNw==","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/37#issuecomment-150270607"},"message":"This issue is regarding stringification of objects, booleans are not a problem (anymore).","files":null},{"type":3,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1445529715,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE1MDI3MTcxMg==","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/37#issuecomment-150271712"},"message":"So we'll add the option `stringify_blessed`, which does the stringify overload on encode, but not on decode for security reasons. What else?","files":null},{"type":3,"author":{"id":"d19730b1d47a47ba43733401ca1bc3d2bbb7f976"},"timestamp":1445530001,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE1MDI3MzAyNQ==","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/37#issuecomment-150273025"},"message":"Here's a basic test case:\n\n```\nuse Test::More;\nuse Cpanel::JSON::XS ();\nuse Time::Piece;\n\nmy $json = Cpanel::JSON::XS-\u003enew-\u003eallow_blessed(1);\n# $json-\u003estringify_blessed(1); ??? possible option\n\nmy $time = localtime;\nmy $encoded = $json-\u003eencode({time =\u003e $time});\nmy $decoded = $json-\u003edecode($encoded);\nis($decoded-\u003e{time}, \"$time\", 'Time::Piece object was stringified') or diag($encoded);\n\ndone_testing;\n```\n\nEDIT: changed to explicit stringification test","files":null},{"type":5,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1445586277,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDQ0MzUzNjg4MQ=="},"added":["security"],"removed":[]},{"type":5,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1445586356,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDQ0MzUzNzYzMA=="},"added":["enhancement"],"removed":[]},{"type":5,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1445586356,"metadata":{"github-id":"MDE0OlVubGFiZWxlZEV2ZW50NDQzNTM3NjMx"},"added":[],"removed":["security"]},{"type":3,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1445596692,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE1MDUzOTk0Mw==","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/37#issuecomment-150539943"},"message":"See branch `stringify_blessed-gh37` WIP","files":null},{"type":3,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1447581425,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE1Njc5NTg4MA==","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/37#issuecomment-156795880"},"message":"I couldn't get the AMAGIC call yet working, so I'll postpone this feature.","files":null},{"type":3,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1448480195,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE1OTcwOTc2MQ==","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/37#issuecomment-159709761"},"message":"I'll keep the name `convert_blessed` for this feature. No need for an extra `stringify_blessed`.\nSee the branch `convert_blessed-gh37`","files":null},{"type":3,"author":{"id":"43c094ffabff3148b0620872e416505b808cddc6"},"timestamp":1448481098,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE1OTcxNDgxNw==","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/37#issuecomment-159714817"},"message":":+1:","files":null},{"type":3,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1448533113,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE1OTg2ODU0OQ==","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/37#issuecomment-159868549"},"message":"The feature works now \u003e5.8. \nThe only question remaining is if to always embed the overloaded stringification into \"\"?\ne.g.\n\n```\n$json-\u003eencode( { time =\u003e localtime } ) eq '{\"time\":\"Thu Nov 26 11:15:16 2015\"})\n```\n\nor\n\n```\n=\u003e '{\"time\":Thu Nov 26 11:15:16 2015}'\n```\n\nWithout embedded doubel-quotes it would allow to stringify into native js primitives, which might be a wanted feature.\nlike  `'{\"time\": { someother_object: 1} }'`, but then you should really use the TO_JSON method.\n\nSo I enforce `\"\"` now. It makes it easier to use normal default perl stringifications.","files":null},{"type":3,"author":{"id":"1eb3a44e27e5afa5482d52154d756417cb39d47a"},"timestamp":1448533696,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE1OTg3MDcxNw==","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/37#issuecomment-159870717"},"message":"Agreed, enforcing `\"\"` seems much better. Anyone who wants to generate something else than a JSON string can just use `TO_JSON`.","files":null},{"type":3,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1448537013,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE1OTg4ODk4Ng==","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/37#issuecomment-159888986"},"message":"All tests pass, I'll merge it now to master","files":null},{"type":4,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1448537013,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50NDc1NDkxODk4"},"status":2},{"type":3,"author":{"id":"d19730b1d47a47ba43733401ca1bc3d2bbb7f976"},"timestamp":1448771851,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE2MDM3MTE1Mg==","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/37#issuecomment-160371152"},"message":"EDIT: Moved to new issue #46","files":null}]}