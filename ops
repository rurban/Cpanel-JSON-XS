{"version":1,"ops":[{"type":6,"author":{"id":"f28cbec155a538c1c4198680587769c82b05cb90"},"timestamp":1572836318,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDMwMzA1NjkwOA=="},"target":"f1c2a1d6fc3618c104db1479aca360768cf1230b90917a096afdd755f858484c","message":"I encountered a corner case and I'm not sure whether it fits the spec on numerical precision and accuracy - **decoding the `0.3` numerical value**, which has no precise representation in binary floating point.\n\nIts _closest_ representable value is `2.99999999999999988898e-01`, but JSON-XS decodes it as `0.30000000000000004` [instead](https://github.com/maxmind/MaxMind-DB/issues/72). I suspect the root cause to be somewhere in the `json_atof` function or one of its dependencies.\n\nHere's a small script that reproduces the issue:\n```perl\nuse Cpanel::JSON::XS qw( decode_json );\n\nmy $literal_float = 0.3;\nmy $json_object = decode_json('{\"value\": 0.3}');\nmy $json_float = $json_object-\u003e{value};\n\nmy $difference = $literal_float - $json_float;\nprint \"$difference\\n\"\n```\nIt outputs `-5.55111512312578e-17`. Is this expected?","files":null},{"type":2,"author":{"id":"f28cbec155a538c1c4198680587769c82b05cb90"},"timestamp":1572836190,"metadata":{"github-id":"MDE3OlJlbmFtZWRUaXRsZUV2ZW50Mjc2NjQ1NDk3Ng=="},"title":"Minute corruption of unrepresentable float","was":"Minute corruption of unrepresentable float"},{"type":3,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1572855578,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU0OTIzNTM0MA==","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/154#issuecomment-549235340"},"message":"A round-trip loss of \u003c 1E16 is expected, but a bit unfortunate. Have to check how normal stringification deals with that problem.","files":null},{"type":6,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1572855578,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDMwMzEyMjkzMw=="},"target":"ade4028435d4d04b82db73e80152f589fc44fbc28bae0c916b206790b43f4f43","message":"A round-trip loss of \u003c 1E16 is expected, but a bit unfortunate. Have to check how normal stringification deals with that problem. \nWith pp it work as expected: 'use JSON::PP; my $f = 0.3; my $j = new JSON::PP; print $f - $j-\u003eallow_nonref-\u003edecode(q(0.3)); =\u003e 0', with XS there's no dual-var kept with the original NV value.","files":null},{"type":6,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1572855622,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDMwMzEyMzEyOA=="},"target":"ade4028435d4d04b82db73e80152f589fc44fbc28bae0c916b206790b43f4f43","message":"A round-trip loss of \u003c 1E16 is expected, but a bit unfortunate. Have to check how normal stringification deals with that problem. \n\nWith pp it work as expected: `'use JSON::PP; my $f = 0.3; my $j = new JSON::PP; print $f - $j-\u003eallow_nonref-\u003edecode(q(0.3));'` =\u003e 0.\nWith XS there's no dual-var kept with the original NV value.","files":null},{"type":6,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1572855638,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDMwMzEyMzIxOQ=="},"target":"ade4028435d4d04b82db73e80152f589fc44fbc28bae0c916b206790b43f4f43","message":"A round-trip loss of \u003c 1E16 is expected, but a bit unfortunate. Have to check how normal stringification deals with that problem. \n\nWith pp it works as expected: `'use JSON::PP; my $f = 0.3; my $j = new JSON::PP; print $f - $j-\u003eallow_nonref-\u003edecode(q(0.3));'` =\u003e 0.\nWith XS there's no dual-var kept with the original NV value.","files":null},{"type":6,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1572855712,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDMwMzEyMzU2OQ=="},"target":"ade4028435d4d04b82db73e80152f589fc44fbc28bae0c916b206790b43f4f43","message":"A round-trip loss of \u003c 1E16 is expected, but a bit unfortunate. Have to check how normal stringification deals with that problem. \n\nWith pp it works as expected: `'use JSON::PP; my $f = 0.3; my $j = new JSON::PP; print $f - $j-\u003eallow_nonref-\u003edecode(q(0.3));'` =\u003e 0.\nWith XS there's no dual-var kept with the original NV value. Maybe we should keep the PV","files":null},{"type":6,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1572855730,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDMwMzEyMzY1NQ=="},"target":"ade4028435d4d04b82db73e80152f589fc44fbc28bae0c916b206790b43f4f43","message":"A round-trip loss of \u003c 1E16 is expected, but a bit unfortunate. Have to check how normal stringification deals with that problem. \n\nWith pp it works as expected: `'use JSON::PP; my $f = 0.3; my $j = new JSON::PP; print $f - $j-\u003eallow_nonref-\u003edecode(q(0.3));'` =\u003e 0.\nWith XS there's no dual-var kept with the original PVNV value. Maybe we should keep the PV","files":null},{"type":6,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1572855844,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDMwMzEyNDIyMQ=="},"target":"ade4028435d4d04b82db73e80152f589fc44fbc28bae0c916b206790b43f4f43","message":"A NV-\u003ePV-\u003eNV round-trip loss of \u003c 1E16 is expected, but a bit unfortunate. Have to check how normal pure-perl stringification deals with that problem. \n\nWith pp it works as expected: `'use JSON::PP; my $f = 0.3; my $j = new JSON::PP; print $f - $j-\u003eallow_nonref-\u003edecode(q(0.3));'` =\u003e 0.\nWith XS there's no dual-var kept with the original PVNV value. Maybe we should keep the PV","files":null},{"type":6,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1572857344,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDMwMzEzMjE5Nw=="},"target":"ade4028435d4d04b82db73e80152f589fc44fbc28bae0c916b206790b43f4f43","message":"A NV-\u003ePV-\u003eNV round-trip loss of \u003c 1E16 is expected, but a bit unfortunate. Have to check how normal pure-perl stringification deals with that problem. \n\nWith pp it works as expected: `'use JSON::PP; my $f = 0.3; my $j = new JSON::PP; print $f - $j-\u003eallow_nonref-\u003edecode(q(0.3));'` =\u003e 0.\nWith XS there's no dual-var kept with the original PVNV value. Maybe we should keep the PV?","files":null},{"type":6,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1572860438,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDMwMzE1MjQxMw=="},"target":"ade4028435d4d04b82db73e80152f589fc44fbc28bae0c916b206790b43f4f43","message":"A NV-\u003ePV-\u003eNV round-trip loss of \u003c 1E-16 is expected, but a bit unfortunate. Have to check how normal pure-perl stringification deals with that problem. \n\nWith pp it works as expected: `'use JSON::PP; my $f = 0.3; my $j = new JSON::PP; print $f - $j-\u003eallow_nonref-\u003edecode(q(0.3));'` =\u003e 0.\nWith XS there's no dual-var kept with the original PVNV value. Maybe we should keep the PV?","files":null},{"type":3,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1572856680,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU0OTI2MDQ1OQ==","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/154#issuecomment-549260459"},"message":"Nope, my initial guess was wrong. JSON::PP::number() does the following trick to round the stringification: 0.3 - (\"0.3\"/1.0) =\u003e 0. i.e. division by 1.0","files":null},{"type":6,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1572856680,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDMwMzEyODU3Mg=="},"target":"bc24ab690517570635544eff5d3f0343e2b74a1b787df42fe058e238970320c2","message":"Nope, my initial guess was wrong. JSON::PP::number() does the following trick to round the stringification: `0.3 - (\"0.3\"/1.0)` =\u003e 0. i.e. division by 1.0","files":null},{"type":5,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1572856654,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDI3NjY4NjcxMTE="},"added":["enhancement"],"removed":[]},{"type":3,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1572860648,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU0OTI3OTg5NA==","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/154#issuecomment-549279894"},"message":"This can be easily fixed since 5.30 only, which has the first reliable Perl_strtod, being independent on LC_NUMERIC. Before Perl_strtod was available since 5.21.4.\n\nWith HAVE_BAD_POWL being set, the accuracy is also correct, using strtold on both conversions. (freebsd 10 only)","files":null},{"type":3,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1572882805,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU0OTQxNzczMg==","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/154#issuecomment-549417732"},"message":"Thanks for this very important finding! Fixed in 4.16","files":null},{"type":4,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1572882805,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50Mjc2ODIyMjEzMw=="},"status":2},{"type":3,"author":{"id":"f28cbec155a538c1c4198680587769c82b05cb90"},"timestamp":1572886357,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU0OTQ0NTYxNg==","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/154#issuecomment-549445616"},"message":"Cool, thanks for the quick response :)","files":null},{"type":5,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1572940701,"metadata":{"github-id":"MDE0OlVubGFiZWxlZEV2ZW50Mjc3MDQwMjc0NQ=="},"added":[],"removed":["enhancement"]},{"type":5,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1572940701,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDI3NzA0MDI3NDc="},"added":["bug"],"removed":[]},{"type":5,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1572940701,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDI3NzA0MDI3NDk="},"added":["regression"],"removed":[]}]}