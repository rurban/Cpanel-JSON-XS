{"version":1,"ops":[{"type":3,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1397593204,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQwNTI5MDg2","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/16#issuecomment-40529086"},"message":"I took #17. Thanks a lot. Now just the new JSON::XS interop needs to be fixed","files":null},{"type":4,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1397593204,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50MTEyMDU5NDY0"},"status":2},{"type":3,"author":{"id":"e849f78806604f631cc0f1502746949cbd92e042"},"timestamp":1397608277,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQwNTUwOTE0","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/16#issuecomment-40550914"},"message":"This was prematurly closed. Ummmm, #17 DOES NOT have the PERL_NO_GET_CONTEXT code. This issue ( #16 ) is a separate pull req for different problem, but since github doesnt allow 2 branches in 1 PR, this isnt an official PR. Please review the 2 branches/commits in the OP of this ticket. The code in this ticket did not make it into your 3.0101 release.","files":null},{"type":3,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1397615058,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQwNTU2NzU5","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/16#issuecomment-40556759"},"message":"Oops, I didn't have a close look. Will bump a new release tomorrow with the normal way (method1), but I'll check before. \nKeeping my_perl on the stack doesn't cost on normal API calls. Normalizing the API is good.","files":null},{"type":4,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1397615058,"metadata":{"github-id":"MDEzOlJlb3BlbmVkRXZlbnQxMTIxNTgwNTE="},"status":1},{"type":3,"author":{"id":"e849f78806604f631cc0f1502746949cbd92e042"},"timestamp":1397632788,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQwNTcwMDU4","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/16#issuecomment-40570058"},"message":"There will be a xsub optimization patch coming soon, so hold off on the cpan release, but in the meantime decide what to do about PERL_NO_GET_CONTEXT.  Method1 maintains binary compatibility with JSON::XS's blessed C structs objects. I modified the JSON struct. Is that a requirement of CJX? If so, method1 must be used. Method 2 is slimmer and faster, than method 1, but breaks object code/C struct ABI between CJX and JX. Also hold off on the CPAN release because I need to write new patch to clean up the XSUBs. I am intentionally breaking this up into different commits instead of me delivering 1 grand orange ball that standards taller than all the other balls on the beach, include the black red gold brick pretending to be a beach ball, for managability.\n\n_Keeping my_perl on the stack doesn't cost on normal API calls._\n\nThere is a cost for my_perl on the stack, since each func call requires a new copy of my_perl for each new C func frame. There is no concept of a const register or a const C auto on asm level on x86 ABI. For example need() has 20 call sites, on GCC 32 bit 4.6 -O2, with method1, need() gets my_perl in reg eax each time from its callers (non standard calling convention). At each caller edi or esi is copied to eax before call need instruction.  Each need() on method1 requires 3 mov instructions. On method 2 each need() only required 2 mov instructions. Next is context_method1 .text size on GCC, look at \"virtual size\", ignore the other numbers. \"size of raw data\" is the image section aligned to next page boundary/disk sector.\n\n```\nC:\\sources\\Cpanel-JSON-XS\u003edumpbin /section:.text  \"C:\\sources\\Cpanel-JSON-XS\\bli\nb\\arch\\auto\\Cpanel\\JSON\\XS\\xs.dll\"\nMicrosoft (R) COFF/PE Dumper Version 7.10.6030\nCopyright (C) Microsoft Corporation.  All rights reserved.\n\n\nDump of file C:\\sources\\Cpanel-JSON-XS\\blib\\arch\\auto\\Cpanel\\JSON\\XS\\xs.dll\nu\nFile Type: DLL\n\nSECTION HEADER #1\n   .text name\n    8E24 virtual size\n    1000 virtual address (6AF41000 to 6AF49E23)\n    9000 size of raw data\n     400 file pointer to raw data (00000400 to 000093FF)\n       0 file pointer to relocation table\n       0 file pointer to line numbers\n       0 number of relocations\n       0 number of line numbers\n60500060 flags\n         Code\n         Initialized Data\n         RESERVED - UNKNOWN\n         RESERVED - UNKNOWN\n         Execute Read\n\n  Summary\n\n        9000 .text\n\nC:\\sources\\Cpanel-JSON-XS\u003e\n```\n\nwith context_method2\n\n```\nC:\\sources\\Cpanel-JSON-XS\u003edumpbin /section:.text  \"C:\\sources\\Cpanel-JSON-XS\\bli\nb\\arch\\auto\\Cpanel\\JSON\\XS\\xs.dll\"\nMicrosoft (R) COFF/PE Dumper Version 7.10.6030\nCopyright (C) Microsoft Corporation.  All rights reserved.\n\n\nDump of file C:\\sources\\Cpanel-JSON-XS\\blib\\arch\\auto\\Cpanel\\JSON\\XS\\xs.dll\n\nFile Type: DLL\n\nSECTION HEADER #1\n   .text name\n    8D34 virtual size\n    1000 virtual address (6AF41000 to 6AF49D33)\n    8E00 size of raw data\n     400 file pointer to raw data (00000400 to 000091FF)\n       0 file pointer to relocation table\n       0 file pointer to line numbers\n       0 number of relocations\n       0 number of line numbers\n60500060 flags\n         Code\n         Initialized Data\n         RESERVED - UNKNOWN\n         RESERVED - UNKNOWN\n         Execute Read\n\n  Summary\n\n        9000 .text\n\nC:\\sources\\Cpanel-JSON-XS\u003e\n```\n\nI suggest you try and benchmark both branches on your machines with a threaded perl, and good large json workload file of your day job, (cpanel/commercial customer).\n\nI noticed the bench tool in eg. Changed it so count == 200 (I kept times at default which is 200), and a I give the script a 15 KB json file, method2 seems to be slightly faster, compare the decode column. And I assume the bench script gives the best/lowest/minimum time of all runs. encode column is unpredictable for method1 and method2.\n\nmethod1, GCC 4.6 32 bit -02 threaded perl\n\n```\nC:\\sources\\Cpanel-JSON-XS\\eg\u003eperl bench \u003c t.json\nmodule        |     encode |     decode |\n--------------|------------|------------|\nCpanel::JSON::XS |  52288.275 |   4716.994 |\n--------------+------------+------------+\n\nC:\\sources\\Cpanel-JSON-XS\\eg\u003eperl bench \u003c t.json\nmodule        |     encode |     decode |\n--------------|------------|------------|\nCpanel::JSON::XS |  55883.072 |   5041.837 |\n--------------+------------+------------+\n\nC:\\sources\\Cpanel-JSON-XS\\eg\u003eperl bench \u003c t.json\nmodule        |     encode |     decode |\n--------------|------------|------------|\nCpanel::JSON::XS |  65813.651 |   5148.786 |\n--------------+------------+------------+\n```\n\n```\nC:\\sources\\Cpanel-JSON-XS\\eg\u003eperl bench \u003c t.json\nmodule        |     encode |     decode |\n--------------|------------|------------|\nCpanel::JSON::XS |  23389.399 |   4851.542 |\n--------------+------------+------------+\n\nC:\\sources\\Cpanel-JSON-XS\\eg\u003eperl bench \u003c t.json\nmodule        |     encode |     decode |\n--------------|------------|------------|\nCpanel::JSON::XS |  22170.383 |   5239.998 |\n--------------+------------+------------+\n\nC:\\sources\\Cpanel-JSON-XS\\eg\u003eperl bench \u003c t.json\nmodule        |     encode |     decode |\n--------------|------------|------------|\nCpanel::JSON::XS |  34940.886 |   4435.366 |\n--------------+------------+------------+\n```\n\nmethod2  GCC 4.6 32 bit -02 threaded perl\n\n```\nC:\\sources\\Cpanel-JSON-XS\\eg\u003eperl bench \u003c t.json\nmodule        |     encode |     decode |\n--------------|------------|------------|\nCpanel::JSON::XS | 116476.090 |   4195.416 |\n--------------+------------+------------+\n\nC:\\sources\\Cpanel-JSON-XS\\eg\u003eperl bench \u003c t.json\nmodule        |     encode |     decode |\n--------------|------------|------------|\nCpanel::JSON::XS |  39936.244 |   4158.788 |\n--------------+------------+------------+\n\nC:\\sources\\Cpanel-JSON-XS\\eg\u003eperl bench \u003c t.json\nmodule        |     encode |     decode |\n--------------|------------|------------|\nCpanel::JSON::XS |  41142.812 |   4968.201 |\n--------------+------------+------------+\n```\n\n```\nC:\\sources\\Cpanel-JSON-XS\\eg\u003eperl bench \u003c t.json\nmodule        |     encode |     decode |\n--------------|------------|------------|\nCpanel::JSON::XS |  25281.360 |   4191.559 |\n--------------+------------+------------+\n\nC:\\sources\\Cpanel-JSON-XS\\eg\u003eperl bench \u003c t.json\nmodule        |     encode |     decode |\n--------------|------------|------------|\nCpanel::JSON::XS |  40469.934 |   4251.163 |\n--------------+------------+------------+\n\nC:\\sources\\Cpanel-JSON-XS\\eg\u003eperl bench \u003c t.json\nmodule        |     encode |     decode |\n--------------|------------|------------|\nCpanel::JSON::XS |  41892.769 |   5024.111 |\n--------------+------------+------------+\n\nC:\\sources\\Cpanel-JSON-XS\\eg\u003eperl bench \u003c t.json\nmodule        |     encode |     decode |\n--------------|------------|------------|\nCpanel::JSON::XS |  16952.162 |   4347.262 |\n--------------+------------+------------+\n```","files":null},{"type":3,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1397665111,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQwNjE5NTUy","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/16#issuecomment-40619552"},"message":"I tried both and don't really like method2 just for maintenance reasons. \nYour benchmark number look a bit too crazy to me so far.\nBut if it's really worth on our own json benchmarks I'll reconsider it. We test with several workloads: small, medium, big, and usually against Data::MessagePack and Sereal.","files":null},{"type":3,"author":{"id":"e849f78806604f631cc0f1502746949cbd92e042"},"timestamp":1397677887,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQwNjQzODk4","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/16#issuecomment-40643898"},"message":"rebased onto cjx 3 https://github.com/bulk88/Cpanel-JSON-XS/commits/contextmethod2_on_CJX3   https://github.com/bulk88/Cpanel-JSON-XS/commits/contextmethod1_on_CJX3","files":null},{"type":3,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1397915962,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQwODcwMjQ1","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/16#issuecomment-40870245"},"message":"Merged `contextmethod1_on_CJX3` with commit 585a5940e5f30d458bdc5c425ca1965b2cdefe6c\nAuthor: bulk88 bulk88@hotmail.com\nDate:   Wed Apr 16 17:12:48 2014 -0400\n\nSee the benchmark at https://github.com/rurban/Cpanel-JSON-XS/commit/585a5940e5f30d458bdc5c425ca1965b2cdefe6c#commitcomment-6047219\n(method1 was 2x faster than method2)","files":null},{"type":4,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1397915962,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50MTEzMjc4MDk2"},"status":2}]}