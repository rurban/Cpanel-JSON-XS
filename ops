{"version":1,"ops":[{"type":3,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1397494467,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQwMzkwMTkx","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/15#issuecomment-40390191"},"message":"Thanks. No patch? :) (just kidding)\n\nThe same happens with JSON::XS and JSON refused to accept my Cpanel::JSON::XS support patch at https://github.com/rurban/JSON\n\nI'll try to monkey patch it.","files":null},{"type":3,"author":{"id":"e849f78806604f631cc0f1502746949cbd92e042"},"timestamp":1397503215,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQwNDA2NzU4","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/15#issuecomment-40406758"},"message":"The author of JSON made his own support branch for CJX then seemed to abandon it. I rebased it onto his master and did a slight tweak to let it build with the env set to CJX. Basically JSON's tests expect the classes of the various objs will always match the prefix of the backend. Your patch in 2.3404 breaks that assumption. Im not sure who is right in this case since as far as i understand issue 13 was about obj compatibility within the same process between  J::X and CJX which is a strange feature request IMHO. I'd expect a process to have one library or the other in the process, not both. The other choice is to special case CJX in JSON's tests to not check classes at  all for certain objs (boolean etc). I havnt tested yet if adding CJX::Boolean to ISA will fix the failures in JSON.","files":null},{"type":3,"author":{"id":"e849f78806604f631cc0f1502746949cbd92e042"},"timestamp":1397521219,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQwNDMzMjIx","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/15#issuecomment-40433221"},"message":"https://github.com/bulk88/JSON/commit/1eeb7a26ef82168231dbf370ac55a40d575aeac8 this fixes all the test failures on my modified JSON 2.90 branch from the JSON side without requiring any C::J::X changes. I have no idea if this fix is appropriate for JSON. I'm not sure how responsive  MAKAMAKA will be since there are 2 doc fixes at https://github.com/makamaka/JSON/pulls that have been open for months and didn't get rolled into JSON 2.90 which was released on 10/31/2013. My goal is to get C::J::X working for EUMM/CPAN:: purposes on all my perl installations/machines since JSON::XS dropped VC support.  Me hacking up JSON.pm (which i've done locally) to use C::J::X and distributing that private modified JSON.PM among my machines isn't reasonable.","files":null},{"type":3,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1397596404,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQwNTM1MTU0","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/15#issuecomment-40535154"},"message":"Should be fixed with commit 1bb90f995fc2c65b832d910f9c31c15414e5a746\nAuthor: Reini Urban rurban@cpanel.net\nDate:   Tue Apr 15 16:11:22 2014 -0500\n\n```\n3.0101 release: fixed booleans for JSON 2.9 and JSON-XS-3.01 interop\n\nadd INTEROP with JSON and JSON::XS pod section.\nadd more interop tests\n\nwe just to know the JSON version beforehand so we can prepare our internal boolean representation\n```\n\nNow we just need JSON to update its docs, and maybe add proper Cpanel::JSON::XS support.\nJSON::XS can now be considered broken beyond repair.","files":null},{"type":4,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1397596404,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50MTEyMDgyMDIx"},"status":2}]}