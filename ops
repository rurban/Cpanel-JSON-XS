{"version":1,"ops":[{"type":1,"author":{"id":"f9603c22b665f0b5581766d292fe0e6a4974b60f"},"timestamp":1409584920,"metadata":{"github-id":"MDU6SXNzdWU0MTY0NjcwNQ==","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/24","origin":"github"},"title":"Support RFC7159: \"values\" as top level.","message":"RFC7159 puts \"values\" at the top level of the grammar, and values can be objects, arrays, strings, numbers, \"null\", \"true\", and \"false\".\n\nExamples: \n  my $jn = encode_json(1);  # 1\n  my $js = encode_json(\"Hello world\"); # \"Hello world\"\n  my $string = decode_json('\"Hello world\"'); # Hello world\n  my $number = decode_json('1'); # 1\n\nThe \"allow_nonref\" configuration option effectively enables this feature for the object-oriented interface to the Cpanel::JSON::XS module, so the code seems to already exist to support this aspect of RFC-7159.\n\nThere could be a few possibilities on how this might be handled:\n\n1: Update the docs to state that Cpanel::JSON::XS supports RFC-7159, and change the default behavior to \"allow_nonref\" enabled.  Also document that for RFC-4627 behavior, it is necessary to set \"allow_nonref\" to disabled.\n\n2: Leave the existing defaults, but update the docs to suggest that for RFC-7159 compliant parsing / encoding, the allow_nonref feature should be turned on.\n\n3: (This could co-exist with either solution 1 or 2): Add an \"rfc7159($enable)\", and a mutually exclusive \"rfc4627($enable)\" tag, and throw an exception if both are used at the same time in conflicting ways, or if allow_nonref is used in a conflicting way at the same time.\n\n...just some ideas.  Ultimately it's probably best for the JSON family of modules to simply adopt the new standard.  It's unlikely to break any existing usage; the RFC was designed for a reasonably painless transition.\n\nAlso worth mentioning: ECMA-404 also supports the notion of a 'value' being the top level, where a value can be those things described above: (object, array, string, etc.).","files":null}]}