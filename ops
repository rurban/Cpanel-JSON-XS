{"version":1,"ops":[{"type":3,"author":{"id":"cfbcaa4ccc85c548a53773770f9acbb38aa86d86"},"timestamp":1585255289,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYwNDY3NDA1Mw==","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/161#issuecomment-604674053"},"message":"```\n13:37 \u003c tinita\u003e I think the problem is with !0 itself. as soon as you save it in an arrayref, its special status gets lost\n13:38 \u003c tinita\u003e perl -wE'use Devel::Peek;Dump !0;Dump [!0]'\n13:38 \u003c@kraih\u003e lol\n```\n\nso I guess this means it's not actually fixable. I hope I'm wrong though.","files":null},{"type":3,"author":{"id":"d19730b1d47a47ba43733401ca1bc3d2bbb7f976"},"timestamp":1585256238,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYwNDY4MTM1Mg==","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/161#issuecomment-604681352"},"message":"SV_yes and SV_no should not be interpreted as JSON booleans (unless via Cpanel::JSON::XS::Type with the boolean type). The user cannot easily tell if something they have is one of these special constants, they might accidentally encode one of them when trying to encode the number 1 (for example), and as demonstrated here they can de-special themselves.","files":null},{"type":6,"author":{"id":"d19730b1d47a47ba43733401ca1bc3d2bbb7f976"},"timestamp":1585256238,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzYwODI0NDg0"},"target":"93ba2d92df8dd528df6c83c0d4328e11f59897d6a78695c00d97b305a873efe2","message":"SV_yes and SV_no should not be interpreted as JSON booleans (unless via Cpanel::JSON::XS::Type with the boolean type). The user cannot easily tell if something they have is one of these special constants, they might accidentally encode one of them when trying to encode the number 1 (for example), and as demonstrated here they can de-special themselves. They are simply not reliably distinct from 0 and 1 in implementation or interface.","files":null},{"type":3,"author":{"id":"cfbcaa4ccc85c548a53773770f9acbb38aa86d86"},"timestamp":1585258215,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYwNDY5NzE2Nw==","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/161#issuecomment-604697167"},"message":"\u003e as demonstrated here they can de-special themselves\n\nI don't agree with this part, as that's the same problem we have with the difference between the string `\"6\"` and the number `6`, depending on how the value has been used be earlier code.","files":null},{"type":3,"author":{"id":"d19730b1d47a47ba43733401ca1bc3d2bbb7f976"},"timestamp":1585258337,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYwNDY5ODAxNg==","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/161#issuecomment-604698016"},"message":"It is similar, and it's not good that that happens either. But in this case, we can avoid the problem and everything still works intuitively.","files":null},{"type":3,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1589737449,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYyOTgyNzUzOQ==","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/161#issuecomment-629827539"},"message":"Not really, !0 is always SV_YES, even if as arrayref.\n```\nperl -Dx -e'print [!0]' =\u003e  SV = SV_YES\nperl -Dx -e'print !1' =\u003e  SV = SV_NO\n\n```","files":null},{"type":6,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1589737449,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzcyNzIyNjY3"},"target":"799743554415d28882072001f64a0353183a02154a713131d81a60b34786a1f1","message":"Not really, !0 is always SV_YES, even if as arrayref.\n```\nperl -Dx -e'print [!0]' =\u003e  SV = SV_YES\nperl -Dx -e'print !1' =\u003e  SV = SV_NO\n\n```\n\nIt's encode which changes the yes to 1","files":null},{"type":6,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1589737967,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzcyNzIzMjIz"},"target":"799743554415d28882072001f64a0353183a02154a713131d81a60b34786a1f1","message":"Not really, !0 is always SV_YES, even if as arrayref.\n```\nperl -Dx -e'print [!0]' =\u003e  SV = SV_YES\nperl -Dx -e'print !1' =\u003e  SV = SV_NO\n\n```\n\nIt's the entersub in perl before the XS encode which changes the [yes] to [1]. \nWith -Dts\n```\n(-e:1)\tpushmark\n    =\u003e  **  \\PVMG(\"\"\\0)  *  \n(-e:1)\tconst(SV_YES)\n    =\u003e  **  \\PVMG(\"\"\\0)  *  SV_YES  \n(-e:1)\tanonlist\n    =\u003e  **  \\PVMG(\"\"\\0)  \\AV()  \n(-e:1)\tmethod_named\n    =\u003e  **  \\PVMG(\"\"\\0)  \\AV()  CV(encode)  \n(-e:1)\tentersub\n    =\u003e  *  PV(\"[1]\"\\0) [UTF8 \"[1]\"]  \n\n```","files":null},{"type":6,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1589738016,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzcyNzIzMjg1"},"target":"799743554415d28882072001f64a0353183a02154a713131d81a60b34786a1f1","message":"Not really, !0 is always SV_YES, even if as arrayref.\n```\nperl -Dx -e'print [!0]' =\u003e  SV = SV_YES\nperl -Dx -e'print !1' =\u003e  SV = SV_NO\n\n```\n\nIt's the entersub in perl before the XS encode which changes the [yes] to [1]. \nWith -Dts\n```\n(-e:1)\tpushmark\n    =\u003e  **  \\PVMG(\"\"\\0)  *  \n(-e:1)\tconst(SV_YES)\n    =\u003e  **  \\PVMG(\"\"\\0)  *  SV_YES  \n(-e:1)\tanonlist\n    =\u003e  **  \\PVMG(\"\"\\0)  \\AV()  \n(-e:1)\tmethod_named\n    =\u003e  **  \\PVMG(\"\"\\0)  \\AV()  CV(encode)  \n(-e:1)\tentersub\n    =\u003e  *  PV(\"[1]\"\\0) [UTF8 \"[1]\"]  \n```\n\nSo it needs to be fixed in perl itself, not the XS, sorry.","files":null},{"type":6,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1589739328,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzcyNzI0ODIw"},"target":"799743554415d28882072001f64a0353183a02154a713131d81a60b34786a1f1","message":"Not really, !0 is always SV_YES, even if as arrayref.\n```\nperl -Dx -e'print [!0]' =\u003e  SV = SV_YES\nperl -Dx -e'print !1' =\u003e  SV = SV_NO\n\n```\n\nIt's the entersub in perl before the XS encode which changes the [yes] to [1]. \nWith -Dts\n```\n(-e:1)\tpushmark\n    =\u003e  **  \\PVMG(\"\"\\0)  *  \n(-e:1)\tconst(SV_YES)\n    =\u003e  **  \\PVMG(\"\"\\0)  *  SV_YES  \n(-e:1)\tanonlist\n    =\u003e  **  \\PVMG(\"\"\\0)  \\AV()  \n(-e:1)\tmethod_named\n    =\u003e  **  \\PVMG(\"\"\\0)  \\AV()  CV(encode)  \n(-e:1)\tentersub\n    =\u003e  *  PV(\"[1]\"\\0) [UTF8 \"[1]\"]  \n```\n\nanonlist changes the YES to 1.\nSo it needs to be fixed in perl itself, not the XS, sorry.","files":null},{"type":6,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1589739444,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzcyNzI0OTcz"},"target":"799743554415d28882072001f64a0353183a02154a713131d81a60b34786a1f1","message":"Not really, !0 is always SV_YES, even if as arrayref.\n```\nperl -Dx -e'print [!0]' =\u003e  SV = SV_YES\nperl -Dx -e'print !1' =\u003e  SV = SV_NO\n\n```\n\nIt's the entersub in perl before the XS encode which changes the [yes] to [1]. \nWith -Dts\n```\n(-e:1)\tpushmark\n    =\u003e  **  \\PVMG(\"\"\\0)  *  \n(-e:1)\tconst(SV_YES)\n    =\u003e  **  \\PVMG(\"\"\\0)  *  SV_YES  \n(-e:1)\tanonlist\n    =\u003e  **  \\PVMG(\"\"\\0)  \\AV()  \n(-e:1)\tmethod_named\n    =\u003e  **  \\PVMG(\"\"\\0)  \\AV()  CV(encode)  \n(-e:1)\tentersub\n    =\u003e  *  PV(\"[1]\"\\0) [UTF8 \"[1]\"]  \n```","files":null},{"type":6,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1589740274,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzcyNzI2MjA1"},"target":"799743554415d28882072001f64a0353183a02154a713131d81a60b34786a1f1","message":"Not really, !0 is always SV_YES, even if as arrayref.\n```\nperl -Dx -e'print [!0]' =\u003e  SV = SV_YES\nperl -Dx -e'print !1' =\u003e  SV = SV_NO\n\n```\n\nIt's the entersub in perl before the XS encode which changes the [yes] to [1]. \nWith -Dts\n```\n(-e:1)\tpushmark\n    =\u003e  **  \\PVMG(\"\"\\0)  *  \n(-e:1)\tconst(SV_YES)\n    =\u003e  **  \\PVMG(\"\"\\0)  *  SV_YES  \n(-e:1)\tanonlist\n    =\u003e  **  \\PVMG(\"\"\\0)  \\AV()  \n(-e:1)\tmethod_named\n    =\u003e  **  \\PVMG(\"\"\\0)  \\AV()  CV(encode)  \n(-e:1)\tentersub\n    =\u003e  *  PV(\"[1]\"\\0) [UTF8 \"[1]\"]  \n```\n\nSo it's `av_make` in anonlist which turns the SV_YES into 1, esp. `sv_setsv_flags` does not support the special immortals, like YES, NO, ... Upstream bug, sorry","files":null},{"type":6,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1589740471,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzcyNzI2NTA4"},"target":"799743554415d28882072001f64a0353183a02154a713131d81a60b34786a1f1","message":"Not really, !0 is always SV_YES, even if as arrayref.\n```\nperl -Dx -e'print [!0]' =\u003e  SV = SV_YES\nperl -Dx -e'print !1' =\u003e  SV = SV_NO\n\n```\n\nIt's the anonlist in perl before the XS encode which changes the [yes] to [1]. \nWith -Dts\n```\n(-e:1)\tpushmark\n    =\u003e  **  \\PVMG(\"\"\\0)  *  \n(-e:1)\tconst(SV_YES)\n    =\u003e  **  \\PVMG(\"\"\\0)  *  SV_YES  \n(-e:1)\tanonlist\n    =\u003e  **  \\PVMG(\"\"\\0)  \\AV()  \n(-e:1)\tmethod_named\n    =\u003e  **  \\PVMG(\"\"\\0)  \\AV()  CV(encode)  \n(-e:1)\tentersub\n    =\u003e  *  PV(\"[1]\"\\0) [UTF8 \"[1]\"]  \n```\n\nSo it's `av_make` in anonlist which turns the SV_YES into 1, esp. `sv_setsv_flags` does not support the special immortals, like YES, NO, ... Upstream bug, sorry","files":null},{"type":6,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1589740564,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzcyNzI2NjEy"},"target":"799743554415d28882072001f64a0353183a02154a713131d81a60b34786a1f1","message":"Not really, !0 is always SV_YES, even if as arrayref.\n```\nperl -Dx -e'print [!0]' =\u003e  SV = SV_YES\nperl -Dx -e'print !1' =\u003e  SV = SV_NO\n\n```\n\nIt's the anonlist in perl before the XS encode which changes the [yes] to [1]. \nWith -Dts\n```\n(-e:1)\tpushmark\n    =\u003e  **  \\PVMG(\"\"\\0)  *  \n(-e:1)\tconst(SV_YES)\n    =\u003e  **  \\PVMG(\"\"\\0)  *  SV_YES  \n(-e:1)\tanonlist\n    =\u003e  **  \\PVMG(\"\"\\0)  \\AV()  \n(-e:1)\tmethod_named\n    =\u003e  **  \\PVMG(\"\"\\0)  \\AV()  CV(encode)  \n(-e:1)\tentersub\n    =\u003e  *  PV(\"[1]\"\\0) [UTF8 \"[1]\"]  \n```\n\nSo it's `av_make` in anonlist which turns the SV_YES into 1, esp. `sv_setsv_flags` does not support the special immortals, like YES, NO, ... Upstream bug, sorry\n\nBTW: Trivially fixable there, but it's already too late.","files":null},{"type":5,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1589740493,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDMzNDQ4MTU1ODQ="},"added":["upstream"],"removed":[]},{"type":4,"author":{"id":"42b8049125821cad60d350df07d9d216b854f3f7"},"timestamp":1589740526,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50MzM0NDgxNjEwOA=="},"status":2},{"type":3,"author":{"id":"d19730b1d47a47ba43733401ca1bc3d2bbb7f976"},"timestamp":1589740981,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYyOTg0MjQzNg==","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/161#issuecomment-629842436"},"message":"My concern is even if that were reliable, it's very common to already be using these values and expecting a 1 on encode, because it's generally indistinguishable from 1 in perl code. The boolean object is the only consistent and obvious way to represent something to be encoded to a boolean without Cpanel::JSON::XS::Type, and people are already used to it.","files":null}]}