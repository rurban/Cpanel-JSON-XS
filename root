{"version":1,"ops":[{"type":1,"author":{"id":"060201ef55c064fbe5ae4c7c1fc40280a7cfa1e3"},"timestamp":1529451819,"metadata":{"github-id":"MDU6SXNzdWUzMzM4NzY2MzA=","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/112","origin":"github"},"title":"Mapping int on 32-bit Perl","message":"The docs say:\n\n```\nIf the number consists of digits only, Cpanel::JSON::XS will try to\nrepresent it as an integer value. If that fails, it will try to\nrepresent it as a numeric (floating point) value if that is\npossible without loss of precision.\n```\n\nWhen it says \"it will try,\" does that mean it will only be treated as an int if the number fits within a perl int, even if allow_bignum() is enabled?\n\nBecause I have a case with a VM running 32-bit perl:\n```\n perl -V:ivsize \nivsize='4';\n```\n\nAnd this script converts the assignee_id to a float:\n\n```\n#!/usr/bin/env perl\n\nuse strict;\nuse warnings;\nuse Math::BigInt;\nuse Cpanel::JSON::XS ();\n\nmy $assignee_id = 5439409363;\n#my $assignee_id = Math::BigInt-\u003enew('5439409363');\n\nmy $json = Cpanel::JSON::XS-\u003enew-\u003eallow_blessed-\u003eallow_bignum-\u003econvert_blessed-\u003eencode({\n  assignee_id =\u003e $assignee_id + 0,\n});\nprint \"$json\\n\";\n```\n\n\nThat prints:\n```\n{\"assignee_id\":5439409363.0}\n```\n\nBut on 64-bit, it's treated as an int. Is the only way to get that treated as an int consistently to create it as a BigInt instance first?\n\nThanks.","files":null}]}