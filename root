{"version":1,"ops":[{"type":1,"author":{"id":"e849f78806604f631cc0f1502746949cbd92e042"},"timestamp":1397548053,"metadata":{"github-id":"MDU6SXNzdWUzMTUzMjM2OQ==","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/16","origin":"github"},"title":"add PERL_NO_GET_CONTEXT patches","message":"CJX/JX's design is unusual. For many functions, a enc/dec var mimmics the behavior of the my_perl \\* on threaded perls. So I wrote 2 different patches, this one https://github.com/bulk88/Cpanel-JSON-XS/commit/78988d331bafe328109cea624fade628adead769 on branch context_method2 deeply integrates into CJX/JX's design philosophy. A more generic patch that simply puts aTHX/pTHX everywhere, is at https://github.com/bulk88/Cpanel-JSON-XS/commit/4d93350354fa05f631e9152fac82a2c4e1852e07 on branch context_method1. I dont think I benchmark which is faster.  I would WAG context_method2 is faster since there are less instructions in the final binary, and in some functions all traces of my_perl are removed in context_method2, so no reading my_perl from C stack, push my_perl onto C stack instructions. Instead my_perl moves along with enc/dec with no overhead .\n\nthreaded Win32 perl with VC 2003 32 bits, PE section sizes in bytes, .text is machine code\n\n2.3404 master, no PERL_NO_GET_CONTEXT\n.text 0x492d\n.rdata 0x1b60\n.data 0x140\n\ncontext_method1\n.text 0x427d\n.rdata 0x1b60\n.data 0x140\n\ncontext_method2 \n.text 0x419d\n.rdata 0x1b60\n.data 0x140\n\nCJX is still not thread safe since it doesn't use MY_CXT and has code like \n\n```\nstatic HV *json_stash, *json_boolean_stash; /* Cpanel::JSON::XS:: */\nstatic SV *json_true, *json_false;\n```\n\nAlso in the XSUBs there is needless X'es in XPUSHs, since the stack already has room since number of incoming params is \u003e= 1 returned param and decode_json and encode_json the c funcs don't return  anything on perl stack.\n\nAlso this code is silly. It looks to be trying to be EBCDIC compatible but increases startup time and is unshareable between perl processes.\n\n```\nMODULE = Cpanel::JSON::XS       PACKAGE = Cpanel::JSON::XS\n\nBOOT:\n{\n    int i;\n\n        for (i = 0; i \u003c 256; ++i)\n          decode_hexdigit [i] =\n            i \u003e= '0' \u0026\u0026 i \u003c= '9' ? i - '0'\n            : i \u003e= 'a' \u0026\u0026 i \u003c= 'f' ? i - 'a' + 10\n            : i \u003e= 'A' \u0026\u0026 i \u003c= 'F' ? i - 'A' + 10\n            : -1;\n\n    json_stash         = gv_stashpv (\"Cpanel::JSON::XS\"         , 1);\n    json_boolean_stash = gv_stashpv (\"JSON::XS::Boolean\", 1);\n```\n\nThat should be static const data with an unrolled array initializer. A small perl script could generate the table once and forever.","files":null}]}