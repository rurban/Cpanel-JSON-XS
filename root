{"version":1,"ops":[{"type":1,"author":{"id":"aef2a9dda9904753f587297b6c61b81a85333d1d"},"timestamp":1383221489,"metadata":{"github-id":"MDU6SXNzdWUyMTg5MjA5Mg==","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/10","origin":"github"},"title":"Memory error when decoding from a hash key","message":"Sorry I don't have a proper failing test case for this; whether I get a segfault seems to depend on the exact pattern of memory allocations, so very small changes to the test script can apparently make things work. But valgrind consistently reports invalid reads and writes when decoding a JSON string that was stored as a key in a Perl hash.  This is `crash.pl`:\n\n``` perl\nuse strict;\nuse warnings;\n\nuse Cpanel::JSON::XS qw\u003cdecode_json\u003e;\n\nmy %h = ('{\"foo\":\"bar\"}' =\u003e 1);\nwhile (my ($k) = each %h) {\n    my $obj = decode_json($k);\n}\n```\n\nAnd running that script under valgrind:\n\n```\n$ valgrind perl -Mblib crash.pl\n==16408== Memcheck, a memory error detector\n==16408== Copyright (C) 2002-2010, and GNU GPL'd, by Julian Seward et al.\n==16408== Using Valgrind-3.6.0.SVN-Debian and LibVEX; rerun with -h for copyright info\n==16408== Command: perl -Mblib crash.pl\n==16408== \n==16408== Invalid read of size 8\n==16408==    at 0x493BC3: S_unshare_hek_or_pvn (in /myperl/bin/perl)\n==16408==    by 0x4AA252: Perl_sv_force_normal_flags (in /myperl/bin/perl)\n==16408==    by 0x4C8C32: Perl_leave_scope (in /myperl/bin/perl)\n==16408==    by 0x49DAFC: Perl_pp_unstack (in /myperl/bin/perl)\n==16408==    by 0x49B0F2: Perl_runops_standard (in /myperl/bin/perl)\n==16408==    by 0x438F5A: perl_run (in /myperl/bin/perl)\n==16408==    by 0x42249B: main (in /myperl/bin/perl)\n==16408==  Address 0x5fd31d0 is 16 bytes before a block of size 32 alloc'd\n==16408==    at 0x4C244E8: malloc (vg_replace_malloc.c:236)\n==16408==    by 0x481DB4: Perl_safesysmalloc (in /myperl/bin/perl)\n==16408==    by 0x4B00CD: Perl_sv_grow (in /myperl/bin/perl)\n==16408==    by 0x626B1CF: decode_json (in /home/arc/Cpanel-JSON-XS-2.3401/blib/arch/auto/Cpanel/JSON/XS/XS.so)\n==16408==    by 0x626B491: XS_Cpanel__JSON__XS_decode_json (in /home/arc/Cpanel-JSON-XS-2.3401/blib/arch/auto/Cpanel/JSON/XS/XS.so)\n==16408==    by 0x49CA19: Perl_pp_entersub (in /myperl/bin/perl)\n==16408==    by 0x49B0F2: Perl_runops_standard (in /myperl/bin/perl)\n==16408==    by 0x438F5A: perl_run (in /myperl/bin/perl)\n==16408==    by 0x42249B: main (in /myperl/bin/perl)\n==16408== \n==16408== Invalid write of size 8\n==16408==    at 0x493BD5: S_unshare_hek_or_pvn (in /myperl/bin/perl)\n==16408==    by 0x4AA252: Perl_sv_force_normal_flags (in /myperl/bin/perl)\n==16408==    by 0x4C8C32: Perl_leave_scope (in /myperl/bin/perl)\n==16408==    by 0x49DAFC: Perl_pp_unstack (in /myperl/bin/perl)\n==16408==    by 0x49B0F2: Perl_runops_standard (in /myperl/bin/perl)\n==16408==    by 0x438F5A: perl_run (in /myperl/bin/perl)\n==16408==    by 0x42249B: main (in /myperl/bin/perl)\n==16408==  Address 0x5fd31d0 is 16 bytes before a block of size 32 alloc'd\n==16408==    at 0x4C244E8: malloc (vg_replace_malloc.c:236)\n==16408==    by 0x481DB4: Perl_safesysmalloc (in /myperl/bin/perl)\n==16408==    by 0x4B00CD: Perl_sv_grow (in /myperl/bin/perl)\n==16408==    by 0x626B1CF: decode_json (in /home/arc/Cpanel-JSON-XS-2.3401/blib/arch/auto/Cpanel/JSON/XS/XS.so)\n==16408==    by 0x626B491: XS_Cpanel__JSON__XS_decode_json (in /home/arc/Cpanel-JSON-XS-2.3401/blib/arch/auto/Cpanel/JSON/XS/XS.so)\n==16408==    by 0x49CA19: Perl_pp_entersub (in /myperl/bin/perl)\n==16408==    by 0x49B0F2: Perl_runops_standard (in /myperl/bin/perl)\n==16408==    by 0x438F5A: perl_run (in /myperl/bin/perl)\n==16408==    by 0x42249B: main (in /myperl/bin/perl)\n==16408== \n==16408== Warning: bad signal number 0 in sigaction()\n==16408== \n==16408== HEAP SUMMARY:\n==16408==     in use at exit: 1,013,025 bytes in 12,919 blocks\n==16408==   total heap usage: 24,820 allocs, 11,901 frees, 1,925,407 bytes allocated\n==16408== \n==16408== LEAK SUMMARY:\n==16408==    definitely lost: 176 bytes in 4 blocks\n==16408==    indirectly lost: 0 bytes in 0 blocks\n==16408==      possibly lost: 756,111 bytes in 12,410 blocks\n==16408==    still reachable: 256,738 bytes in 505 blocks\n==16408==         suppressed: 0 bytes in 0 blocks\n==16408== Rerun with --leak-check=full to see details of leaked memory\n==16408== \n==16408== For counts of detected and suppressed errors, rerun with: -v\n==16408== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 4 from 4)\n```\n\nThis is Perl 5.16.0 on x86-64 Linux; I've also reproduced it on other 5.16.x Perls and on Mac OS.  (And also with the ancestral `JSON::XS` too, so I suspect the bug comes from there.)\n\nGetting the script to produce an actual segfault seems to need larger JSON documents, or a larger hash, or both; but the error as reported by valgrind seems to be the same regardless of whether there's a segfault.","files":null}]}