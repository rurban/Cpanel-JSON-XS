{"version":1,"ops":[{"type":1,"author":{"id":"61d29c699221d2f311671dd3d212ea6983677610"},"timestamp":1553232654,"metadata":{"github-id":"MDU6SXNzdWU0MjQwNTM0OTM=","github-url":"https://github.com/rurban/Cpanel-JSON-XS/issues/125","origin":"github"},"title":"Unicode strings with BOM corrupt -\u003eutf8 state","message":"So we ran into this recently, and finally put together a test case.\n\nIf you have a `Cpanel::JSON::XS` instance *without* the `utf8` flag set, it'll silently enable that flag if you call `-\u003edecode` with a string containing a BOM.\n\nBest illustrated with a test script:\n\n```\nuse strict;\nuse warnings;\n\nuse Test::More;\n\nuse Cpanel::JSON::XS;\nuse charnames qw(:short);\n\nmy $json = Cpanel::JSON::XS-\u003enew;\n\nok(my $as_json = eval {\n    $json-\u003eencode({ example =\u003e \"data with non-ASCII characters\", unicode =\u003e \"\\N{greek:Sigma}\" })\n}, 'can encode a basic structure');\nok(eval { $json-\u003edecode($as_json) }, 'can decode again');\nok(eval { $json-\u003edecode(\"\\x{feff}\" . $as_json) }, 'can decode with BOM');\nok(eval { $json-\u003edecode($as_json) }, 'can decode original');\ndone_testing;\n```\n\nI think this behaviour is incorrect in two ways:\n\n- it affects the object state and is not documented\n- even for the BOM-containing string, this behaviour is IMHO wrong: the string is already Unicode, rather than UTF-8 bytes, it just contains a Unicode BOM codepoint that can be skipped - switching to `utf8` byte processing even for that string seems incorrect.\n\nhttps://metacpan.org/source/RURBAN/Cpanel-JSON-XS-4.10/XS.xs#L3752\n\nthanks,\n\nTom","files":null}]}